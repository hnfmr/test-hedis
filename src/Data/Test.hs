{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module Data.Test (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Test\", haskellPrefix = [MName \"Data\"], parentModule = [], baseName = MName \"Test\"}, protoFilePath = [\"Data\",\"Test.hs\"], protoSource = \"test.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Test.Bar\", haskellPrefix = [MName \"Data\"], parentModule = [MName \"Test\"], baseName = MName \"Bar\"}, descFilePath = [\"Data\",\"Test\",\"Bar.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Test.Bar.wine\", haskellPrefix' = [MName \"Data\"], parentModule' = [MName \"Test\",MName \"Bar\"], baseName' = FName \"wine\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Test.Bar.good\", haskellPrefix' = [MName \"Data\"], parentModule' = [MName \"Test\",MName \"Bar\"], baseName' = FName \"good\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Test.Foo\", haskellPrefix = [MName \"Data\"], parentModule = [MName \"Test\"], baseName = MName \"Foo\"}, descFilePath = [\"Data\",\"Test\",\"Foo.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Test.Foo.bar\", haskellPrefix' = [MName \"Data\"], parentModule' = [MName \"Test\",MName \"Foo\"], baseName' = FName \"bar\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Test.Bar\", haskellPrefix = [MName \"Data\"], parentModule = [MName \"Test\"], baseName = MName \"Bar\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Test.Foo.quux\", haskellPrefix' = [MName \"Data\"], parentModule' = [MName \"Test\",MName \"Foo\"], baseName' = FName \"quux\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Test.Foo.baz\", haskellPrefix' = [MName \"Data\"], parentModule' = [MName \"Test\",MName \"Foo\"], baseName' = FName \"baz\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 5}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Test.Foo.booz\", haskellPrefix' = [MName \"Data\"], parentModule' = [MName \"Test\",MName \"Foo\"], baseName' = FName \"booz\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "w\n\ntest.proto\"!\n\ETXBar\DC2\f\n\EOTwine\CAN\SOH \STX(\t\DC2\f\n\EOTgood\CAN\STX \SOH(\b\"F\n\ETXFoo\DC2\SYN\n\ETXbar\CAN\SOH \STX(\v2\t.Test.Bar\DC2\f\n\EOTquux\CAN\STX \SOH(\b\DC2\v\n\ETXbaz\CAN\ETX \SOH(\ENQ\DC2\f\n\EOTbooz\CAN\EOT \ETX(\t")